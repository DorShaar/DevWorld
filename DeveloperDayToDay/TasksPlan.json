{
	"plan": [
		{
			"question": "Is it bug or a feature?",
			"allowedAnswers": {"feature": "feature", "f": "feature", "bug": "bug", "b": "bug"},
			"variableName": "taskType"
		},
		{
			"question": "What is the name of the {taskType}?",
			"variableName": "taskName"
		},
		{
			"predicat": {
				"predicatParameter": "taskType",
				"predicatCases": {
					"bug": {
						"question": "How is the user currently affected?",
						"variableName": "userExperience"
					},
					"feature": {
						"question": "How will the user be positively affected?",
						"variableName": "userExperience"
					}
				}
			}
		},
		{
			"question": "What is the DOD (Definition of Done) of '{taskName}'?",
			"variableName": "dod"
		},
		{
			"question": "Does '{taskName}' requires learning new information?",
			"yesNoAnswers": true,
			"variableName": "requiresLearning"
		},
		{
			"predicat": {
				"predicatParameter": "requiresLearning",
				"predicatCases": {
					"yes": {
						"question": "How much learning work is required for task '{taskName}'?",
						"answerRange": ["1", "30"],
						"variableName": "learningTime"
					}
				}
			}
		},
		{
			"predicat": {
				"predicatParameter": "requiresLearning",
				"predicatCases": {
					"yes": {
						"question": "How much time needed to spend on knowledge sharing?",
						"answerRange": ["1", "30"],
						"variableName": "knowledgeSharingTime"
					}
				}
			}
		},
		{
			"question": "Does '{taskName}' requires analytics?",
			"yesNoAnswers": true,
			"variableName": "requiresAnalytics"
		},
		{
			"predicat": {
				"predicatParameter": "requiresAnalytics",
				"predicatCases": {
					"yes": {
						"question": "How much analytics work is required for task '{taskName}'?",
						"answerRange": ["1", "30"],
						"variableName": "analyticsTime"
					}
				}
			}
		},
		{
			"question": "Is it important to make the task '{taskName}' work on the client's specific version?",
			"yesNoAnswers": true,
			"variableName": "isTaskShouldBeForSpecificVersion"
		},
		{
			"predicat": {
				"predicatParameter": "isTaskShouldBeForSpecificVersion",
				"predicatCases": {
					"yes": {
						"question": "Which version does the '{taskName}' is targeted for?",
						"variableName": "clientVersion"
					}
				}
			}
		},
		{
			"predicat": {
				"predicatParameter": "isTaskShouldBeForSpecificVersion",
				"predicatCases": {
					"yes": {
						"question": "How much time does it take to test fix on version '{clientVersion}'?",
						"answerRange": ["1", "20"],
						"variableName": "testOnSpecificVersionTime"
					}
				}
			}
		},
		{
			"question": "Are we short with samples to test '{taskName}'? Should we collect or create more samples?",
			"yesNoAnswers": true,
			"variableName": "shouldCollectSamples"
		},
		{
			"predicat": {
				"predicatParameter": "shouldCollectSamples",
				"predicatCases": {
					"yes": {
						"question": "How much time should it take to collect or create more samples?",
						"answerRange": ["1", "30"],
						"variableName": "collectSamplesTime"
					}
				}
			}
		},
		{
			"predicat": {
				"predicatParameter": "taskType",
				"predicatCases": {
					"bug": {
						"question": "How much time should it take to reproduce the bug?",
						"answerRange": ["1", "30"],
						"variableName": "reproduceTime"
					}
				}
			}
		},
		{
			"question": "How much time needed for writing UT's and E2E tests for '{taskName}'?",
			"answerRange": ["1", "30"],
			"variableName": "writingTestsTime"
		},
		{
			"question": "Can QA reproduce or test the bug? Make sure QA knows what to test",
			"answerRange": ["1", "5"],
			"variableName": "qaSyncTime"
		},
		{
			"question": "Is '{taskName}' may be shared with support or the team after work is done?",
			"yesNoAnswers": true,
			"variableName": "shouldPresentDoneWork"
		},
		{
			"predicat": {
				"predicatParameter": "shouldPresentDoneWork",
				"predicatCases": {
					"yes": {
						"question": "How much time should it take to present '{taskName}'?",
						"answerRange": ["1", "10"],
						"variableName": "presentDoneWorkTime"
					}
				}
			}
		},
		{
			"question": "How much time '{taskName}' should take to implement?",
			"answerRange": ["1", "50"],
			"variableName": "taskImplementationTime"
		},
		{
			"question": "how much time after implementing '{taskName}' should take to review logs?",
			"answerRange": ["1", "5"],
			"variableName": "reviewLogsTime"
		}
	],
	"WorkNotes": {
		"KnowledgeShare": ["Share the information you learn or already know prior to implementation phase in order to get feedback from experienced co-workers",
			"Studied something new? Implemented new feature? Write something about it so anyone can know (Confluence, Miro..)"],
		"PullRequests": ["Clean your code but don't refactor. It may be difficult for your reviewer to observe your changes",
			"Try split your commits with meaningful seperation, meaning clean code should be in a separate commit than the main added logic",
			"Make sure you understand the code you are reviewing and also make sure the reviewer understands your code changes",
			"Before sending a PR, read you draft. Do yourself a review first"],
		"TestDrivenDesign": ["Try writing your tests before writing your code",
			"Never give up on tests, even if you are in a rush. Those words are written by blood. It would save you a lot of hours"],
		"CodeImplementation": ["Try avoid dependencies as much as you can, but consider how bug prone will your code be",
			"If something was there, there is a reason for it. Before changing or removing it, make sure you understand what is does",
			"Not understanding why something does not work? If relevant, read open issues in github",
			"Be aware to sensitive information like secrets, passwords,.. Make sure you consume them via proper place where their are kept safe",
			"Downtimes, even if they are small, may influence the customer. Try as much as you can to prevent the system to be restarted in order to apply some configurations, and those configurations will be updated dynamically"],
		"WorkFlow": ["Tend to a CI/CD work (Continuous integration and delivery), so you can deliever, even partial implementation, to the benefit of the customer.",
			"Let your system run with a new feature before delivering it to the customer. At least the most obvious bugs will appear first",
			"In dailies or weeklies share your progress in few sentences instead of telling 'I'm in progress'",
			"It's ok to not understand something. Better confess and ask questions than be shy",
			"Try write your work progress on a note. Who knows? maybe your manager will interrupt you.. You will need it to keep track after context switching",
			"Are you sure you have the best solution out there? If that is only 5 minutes looking over the internet, do it. You may bump into even more clever solutions",
			"If that is possible, try be dynamic in the tasks of a feature. If one teammate knows part of the task and second teammate knows that other part, split it into two tasks to gain better efficiency",
			"Longrun - Have the ability to measure yourself. Inserted new feauture? Great, does it effects the performance?",
			"Analytics - Going to created new feature? Think about data you need to pull from the customer inorder to understand if your feature is successful or not"],
		"WorkTriangle": ["Plan your task according to a time-resource-content triangle and define DOD (Definition of Done)",
			"When raising a flag, be prepared with a different triangle"],
		"WorkPrioritization": ["Avoid Best-Effort implemenation, try be focused on the customers needs instead",
			"It is very honorable to pause or stop a work because the value it gives is not significant to the end customer. It's not easy to throw away your work"],
		"NewTasksHandling": ["Got new task from product? Don't hasitate to talk directly to them, understand what are the needs of the customer",
			"Going to do something new? Spend time read about it Documentations, RFCs,... If you find something valuable, share it of course"],
		"HotFixes": ["Is the fix you are implementing is for a specific customer? Make sure you provide him a fix which is compatible for him. For example, if the customer has version 19.5 and you are developing on 20.2, implementing a fix in top of 20.2 may be incompatible for the customer"],
		"Cloud": ["If you are working with a cloud client, ask yourself does it has limited quoute for you?",
			"Keep in mind which region you get service from. Altough Internet is a fast creature, still long traffic effect the performance"]
	}
}