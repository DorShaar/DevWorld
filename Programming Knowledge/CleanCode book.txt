Later equals never.

Code is never perfect, we should be forgiving (because everyone does mistakes / non-perfect job).

Code, making it easy to read actually makes it easier to write.

Class should be small, have single responsebility, one reason to change.
Functions should do one thing. They should do it well. They do it only.

The proper use of comments is to compensate for our failure to express ourself in
code. Note that I used the word failure.

Dont return null, that increases the chances for NullReferenceException, and make the caller write uglier code.
Also don't pass nulls, that demands from the method to check for null.

Using 3rd party API may be hard. It may be more efficient to use "learning tests" - write 3rd party tests that 
can examine wanted funcionalities. If that 3rd party is good, those tests will be added to the building tests.

We should not letting too much of our code know about the third-party particulars. It’s better
to depend on something you control than on something you don’t control, lest it end up controlling you.

TDD - Test Driven Design / Development. You should write your code after writting your tests. 
They should be together - at first write test method, right after it write the code.

The less arguments in a method the better. For clarity and for testing. Also output arguments, if they must 
be an argument and not be returned from the method, should be named like that "outputArgument" or "updatedObject'.

We often forget that it is also best to postpone decisions until the last possible moment. This isn’t lazy or irresponsible; 
it lets us make informed choices with the best possible information. A premature decision is a decision made with 
suboptimal knowledge.

Do not ignore system failures as one-offs.

DRY principle - don't repeat yourself.

Dead code - don't be afraid to delete it. It will not change on refactor but will still compile. It will get rotten.
The source control will hold history code, so in the worst case, it's there.

"Fail fast approach" - Make the code fail and throw the responsibility to the class who should handle it as fast you can.
An example for that is to check immediately for invalid data in if so, throw an exception or return from the method.
Doing the opposite, preventing something from failing while it’s going to fail doesn’t solve anything. It does not solve 
the problem, it just hides the problems. And the longer it takes for the problems to appear on the surface, the harder it is 
to fix and the more it costs.
That’s why the fail-fast principle encourages us to fail fast and early: If an error occurs, fail immediately and visibily.
If something unusually or unexpectedly occurs, let the software fail immediately instead of postponing the failure or working around the failure.

A well-defined interface does not offer very many aunctions to depend upon, so coupling is low. A poorly defined interface
provides lots of functions that you must call, so coupling is high.

Q: Should we return null or throw an exception?
A: Only throw an exception if it is truly an error. If it is expected behavior for the object to not exist, return the null. 
Otherwise it is a matter of preference. As a general rule, if the method should alwaysreturn an object, then go with the exception.

Martin Fowlers - integration tests (https://martinfowler.com/articles/practical-test-pyramid.html):
In case you want to test a private method, consider if the class is not too complex. Private method should be simple without complex logic.
You can split the class to teo different classes, which in the second class the private method will be public and can be tested.