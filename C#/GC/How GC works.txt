Taken from: https://medium.com/techcreators/howgarbage-collection-works-in-c-14002a9a5222

Post content by Gopi:

What is Garbage Collection?
In general layman term, Garbage collection (GC) is nothing but re-gaining the memory assigned to objects which are not in use at the moment in any part of our program. I hope the definition gives a straight thought of what is garbage collection. But still, we have lots to discuss it. Let’s get started.
When you create an object in C#, the memory for the object is allocated in the heap. The heap is totally managed by CLR (Common Language Runtime) in the .NET framework. The memory allocation and deallocation in heap are handled by CLR. There is always a limit to everything, in such case memory is also limited. We need to clean up some memory in the heap so that CLR could able to allocate memory to the newly created objects.
Let’s discuss something about memory allocation process generally in the system. Win32 DLL (Dynamic Link Library) in the Operating System takes care of memory allocations depends on your OS version either 32 bit or 64 bit. For 32 bit operating systems, the maximum RAM it can support is up to 4 GB. The virtual memory allocation is limited to 2GB at the max by Win32 DLL. Heap memory is also handled from this virtual memory.

What is Managed and UnManaged code in C#?
All objects created and managed under the scope of CLR are called Managed Code. When the object is created and managed outside of CLR like File Stream, Database connections, network sockets and COM objects are called UnManaged Code. The memory allocated to UnManaged objects can be retrieved by writing using clauses in the program which internally uses the Dispose method from the IDisposable interface. About IDisposable and Dispose methods, we will be discussing more in another post.
Heap Generations
Heap memory is divided into three category which is Generation 0, Generation 1 and Generation 2. CLR takes care of these generations using GC.
Generation 0 is the place where all the newly created objects are placed which is also been considered as short-lived objects.
Generation 1 is the place like the buffer between short and long-lived objects.
Generation 2 is the long-lived objects. Objects created for the Static members, Global variables are placed directly in Generation 2 consider those objects have a longer lifespan than others.
When the object size is greater than 85000 bytes, it will directly placed into the Generation 2.
Garbage Collection happens frequently on Generation 0 where we have mostly short live objects. When GC comes to know that the objects still live in program. GC moves all those objects to the Generation 1 which is called as Survivors. When GC happens on Generation 1 all living objects are moved to Generation 2. All the objects are Generations 2 are the long living objects, which last there for entire application lifespan mostly. If not, those objects are also got recovered by GC when it runs on Generation 2.
How GC comes to know about living objects.
Before GC starts running all the managed threads are suspended except the one thread which triggered the GC. When Garbage Collections start scanning for objects in the Generation 0. GC create one tree for all the living objects. If any of the objects do not participate in the tree which means that the object is no more used in any part of the application. Which is considered as Garbage, got destroyed and memory gets back.
At the end of the GC process, it’s Garbage Collector’s responsibility to re-assign the memory address from the deleted objects to the living objects. by doing this the object memory gets compact.
GC gets triggered automatically when we have less virtual memory and It’s not advisable to invoke the GC programmatically. It’s good to let it happened on its own. Running GC won’t affect your application performance.